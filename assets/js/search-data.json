{
  
    
        "post0": {
            "title": "Preprocessing",
            "content": "",
            "url": "https://asvcode.github.io/fmi_docs/2020/11/28/preprocessing.html",
            "relUrl": "/2020/11/28/preprocessing.html",
            "date": " • Nov 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "explore",
            "content": "from fastai.vision.all import * from fastai.medical.imaging import * from torchvision.utils import save_image matplotlib.rcParams[&#39;image.cmap&#39;] = &#39;bone&#39; . Instance Sort . Many dicom datasets have multiple slices of images for the same patient. For example with this dataset each folder represents a single patient and each folder can have multiple slices. . . Note: View sort tutorial on Kaggle (click on Kaggle icon) . . s = &#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/&#39; sort_items = get_dicom_files(s, folders=&#39;ID00007637202177411956430&#39;) sort_items . (#30) [Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/1.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/10.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/11.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/12.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/13.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/14.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/15.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/16.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/17.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/18.dcm&#39;)...] . In this example there are 30 images within the folder. To view them: . imgs = [] for filename in sort_items: file = dcmread(filename).pixel_array img = TensorDicom(file) imgs.append(img) show_images(imgs, nrows=3) . We notice that the images are not in sequence. Dicoms typically have an InstanceNumber which can be used to display the images in sequence. . instance_sort[source] . instance_sort(folder:L&#39;&gt;)) . Helper to sort files by instance number . instance_dcmread[source] . instance_dcmread(folder:L) . instance dcmread . instance_show[source] . instance_show(folder:L, nrows=1) . Helper to display sorted files by instance number . We can simply view the images in sequence by using instance_show . instance_show(sort_items, nrows=3) . View images . fastai has a handy method from.dicoms that can access dicom metadata and display this in a dataframe. . m_items = get_dicom_files(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430&#39;) source = &#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/&#39; dicom_dataframe = pd.DataFrame.from_dicoms(m_items) dicom_dataframe[:2] . SpecificCharacterSet ImageType SOPInstanceUID Modality Manufacturer ManufacturerModelName PatientName PatientID PatientSex DeidentificationMethod ... ImageOrientationPatient3 ImageOrientationPatient4 ImageOrientationPatient5 MultiPixelSpacing PixelSpacing1 img_min img_max img_mean img_std img_pct_window . 0 ISO_IR 100 | ORIGINAL | 2.25.12297650151329871895440507938349160734 | CT | GE MEDICAL SYSTEMS | LightSpeed VCT | (I, D, 0, 0, 0, 0, 7, 6, 3, 7, 2, 0, 2, 1, 7, 7, 4, 1, 1, 9, 5, 6, 4, 3, 0) | ID00007637202177411956430 | | Table; | ... | 0.0 | 1.0 | 0.0 | 1 | 0.652344 | -2000 | 2842 | -1.454884 | 1137.488858 | 0.058094 | . 1 ISO_IR 100 | ORIGINAL | 2.25.37611372879908126511187998276199853341 | CT | GE MEDICAL SYSTEMS | LightSpeed VCT | (I, D, 0, 0, 0, 0, 7, 6, 3, 7, 2, 0, 2, 1, 7, 7, 4, 1, 1, 9, 5, 6, 4, 3, 0) | ID00007637202177411956430 | | Table; | ... | 0.0 | 1.0 | 0.0 | 1 | 0.652344 | -2000 | 2918 | 19.038597 | 1138.876560 | 0.068130 | . 2 rows × 67 columns . get_dicom_image[source] . get_dicom_image(df, key, nrows=3, source=None) . Helper to view images by key . get_dicom_image easily allows to view images based on the chosen dataframe key. For example we can reduce the dataframe created earlier. . pct = dicom_dataframe[[&#39;PatientID&#39;, &#39;InstanceNumber&#39;, &#39;img_pct_window&#39;, &#39;img_mean&#39;, &#39;img_std&#39;]].sort_values(by=[&#39;img_pct_window&#39;], ascending=False).reset_index(drop=True) pct[:5] . PatientID InstanceNumber img_pct_window img_mean img_std . 0 ID00007637202177411956430 | 20 | 0.077923 | 109.478535 | 1174.014672 | . 1 ID00007637202177411956430 | 21 | 0.075516 | 127.095284 | 1182.195403 | . 2 ID00007637202177411956430 | 29 | 0.075508 | 210.377762 | 1217.328780 | . 3 ID00007637202177411956430 | 18 | 0.075157 | 97.442841 | 1172.540524 | . 4 ID00007637202177411956430 | 28 | 0.075096 | 212.950813 | 1219.356338 | . View images by img_pct_window . get_dicom_image(pct[:30], &#39;img_pct_window&#39;, source=source) . View by img_mean . mean = dicom_dataframe[[&#39;PatientID&#39;, &#39;InstanceNumber&#39;, &#39;img_pct_window&#39;, &#39;img_mean&#39;, &#39;img_std&#39;]].sort_values(by=[&#39;img_mean&#39;], ascending=False).reset_index(drop=True) mean[:5] . PatientID InstanceNumber img_pct_window img_mean img_std . 0 ID00007637202177411956430 | 26 | 0.074780 | 216.025375 | 1223.787277 | . 1 ID00007637202177411956430 | 27 | 0.074970 | 215.649502 | 1221.412337 | . 2 ID00007637202177411956430 | 28 | 0.075096 | 212.950813 | 1219.356338 | . 3 ID00007637202177411956430 | 29 | 0.075508 | 210.377762 | 1217.328780 | . 4 ID00007637202177411956430 | 25 | 0.073563 | 208.641216 | 1222.713558 | . get_dicom_image(mean[:30], &#39;img_mean&#39;, source=source) .",
            "url": "https://asvcode.github.io/fmi_docs/medical_imaging/dicom/fastai/explore/2020/11/28/explore.html",
            "relUrl": "/medical_imaging/dicom/fastai/explore/2020/11/28/explore.html",
            "date": " • Nov 28, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "pipeline",
            "content": "I = (32-bit signed integer pixels) F = (32-bit floating point pixels) L = (8-bit pixels, black and white) . class PILWindow[source] . PILWindow() :: PILBase . Specify windows for use with DataBlocks . class LungWindow[source] . LungWindow() :: PILBase . This class represents an image object. To create :py:class:~PIL.Image.Image objects, use the appropriate factory functions. There&#39;s hardly ever any reason to call the Image constructor directly. . :py:func:~PIL.Image.open | :py:func:~PIL.Image.new | :py:func:~PIL.Image.frombytes | . class PEWindow[source] . PEWindow() :: PILBase . This class represents an image object. To create :py:class:~PIL.Image.Image objects, use the appropriate factory functions. There&#39;s hardly ever any reason to call the Image constructor directly. . :py:func:~PIL.Image.open | :py:func:~PIL.Image.new | :py:func:~PIL.Image.frombytes | .",
            "url": "https://asvcode.github.io/fmi_docs/medical_imaging/dicom/fastai/pipeline/2020/11/28/_11-28-pipeline.html",
            "relUrl": "/medical_imaging/dicom/fastai/pipeline/2020/11/28/_11-28-pipeline.html",
            "date": " • Nov 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://asvcode.github.io/fmi_docs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://asvcode.github.io/fmi_docs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}