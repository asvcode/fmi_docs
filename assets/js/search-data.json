{
  
    
        "post0": {
            "title": "explore",
            "content": "from nbdev.showdoc import * . . from fastai.vision.all import * from fastai.medical.imaging import * from torchvision.utils import save_image matplotlib.rcParams[&#39;image.cmap&#39;] = &#39;bone&#39; . Instance Sort . Many dicom datasets have multiple slices of images for the same patient. For example with this dataset each folder represents a single patient and each folder can have multiple slices. . . Note: View sort tutorial on Kaggle (click on Kaggle icon) . s = &#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/&#39; sort_items = get_dicom_files(s, folders=&#39;ID00007637202177411956430&#39;) sort_items . (#30) [Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/1.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/10.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/11.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/12.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/13.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/14.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/15.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/16.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/17.dcm&#39;),Path(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430/18.dcm&#39;)...] . In this example there are 30 images within the folder. To view them: . imgs = [] for filename in sort_items: file = dcmread(filename).pixel_array img = TensorDicom(file) imgs.append(img) show_images(imgs, nrows=3) . We notice that the images are not in sequence. Dicoms typically have an InstanceNumber which can be used to display the images in sequence. . instance_sort[source] . instance_sort(folder:L&#39;&gt;)) . Helper to sort files by instance number . instance_dcmread[source] . instance_dcmread(folder:L) . instance dcmread . instance_show[source] . instance_show(folder:L, nrows=1) . Helper to display sorted files by instance number . We can simply view the images in sequence by using instance_show . instance_show(sort_items, nrows=3) . View images . fastai has a handy method from.dicoms that can access dicom metadata and display this in a dataframe. . m_items = get_dicom_files(&#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/ID00007637202177411956430&#39;) source = &#39;D:/Datasets/osic-pulmonary-fibrosis-progression/train/&#39; dicom_dataframe = pd.DataFrame.from_dicoms(m_items) dicom_dataframe[:2] . SpecificCharacterSet ImageType SOPInstanceUID Modality Manufacturer ManufacturerModelName PatientName PatientID PatientSex DeidentificationMethod ... ImageOrientationPatient3 ImageOrientationPatient4 ImageOrientationPatient5 MultiPixelSpacing PixelSpacing1 img_min img_max img_mean img_std img_pct_window . 0 ISO_IR 100 | ORIGINAL | 2.25.12297650151329871895440507938349160734 | CT | GE MEDICAL SYSTEMS | LightSpeed VCT | (I, D, 0, 0, 0, 0, 7, 6, 3, 7, 2, 0, 2, 1, 7, 7, 4, 1, 1, 9, 5, 6, 4, 3, 0) | ID00007637202177411956430 | | Table; | ... | 0.0 | 1.0 | 0.0 | 1 | 0.652344 | -2000 | 2842 | -1.454884 | 1137.488858 | 0.058094 | . 1 ISO_IR 100 | ORIGINAL | 2.25.37611372879908126511187998276199853341 | CT | GE MEDICAL SYSTEMS | LightSpeed VCT | (I, D, 0, 0, 0, 0, 7, 6, 3, 7, 2, 0, 2, 1, 7, 7, 4, 1, 1, 9, 5, 6, 4, 3, 0) | ID00007637202177411956430 | | Table; | ... | 0.0 | 1.0 | 0.0 | 1 | 0.652344 | -2000 | 2918 | 19.038597 | 1138.876560 | 0.068130 | . 2 rows × 67 columns . get_dicom_image[source] . get_dicom_image(df, key, nrows=3, source=None) . Helper to view images by key . get_dicom_image easily allows to view images based on the chosen dataframe key. For example we can reduce the dataframe created earlier. . pct = dicom_dataframe[[&#39;PatientID&#39;, &#39;InstanceNumber&#39;, &#39;img_pct_window&#39;, &#39;img_mean&#39;, &#39;img_std&#39;]].sort_values(by=[&#39;img_pct_window&#39;], ascending=False).reset_index(drop=True) pct[:5] . PatientID InstanceNumber img_pct_window img_mean img_std . 0 ID00007637202177411956430 | 20 | 0.077923 | 109.478535 | 1174.014672 | . 1 ID00007637202177411956430 | 21 | 0.075516 | 127.095284 | 1182.195403 | . 2 ID00007637202177411956430 | 29 | 0.075508 | 210.377762 | 1217.328780 | . 3 ID00007637202177411956430 | 18 | 0.075157 | 97.442841 | 1172.540524 | . 4 ID00007637202177411956430 | 28 | 0.075096 | 212.950813 | 1219.356338 | . View images by img_pct_window . get_dicom_image(pct[:30], &#39;img_pct_window&#39;, source=source) . View by img_mean . mean = dicom_dataframe[[&#39;PatientID&#39;, &#39;InstanceNumber&#39;, &#39;img_pct_window&#39;, &#39;img_mean&#39;, &#39;img_std&#39;]].sort_values(by=[&#39;img_mean&#39;], ascending=False).reset_index(drop=True) mean[:5] . PatientID InstanceNumber img_pct_window img_mean img_std . 0 ID00007637202177411956430 | 26 | 0.074780 | 216.025375 | 1223.787277 | . 1 ID00007637202177411956430 | 27 | 0.074970 | 215.649502 | 1221.412337 | . 2 ID00007637202177411956430 | 28 | 0.075096 | 212.950813 | 1219.356338 | . 3 ID00007637202177411956430 | 29 | 0.075508 | 210.377762 | 1217.328780 | . 4 ID00007637202177411956430 | 25 | 0.073563 | 208.641216 | 1222.713558 | . get_dicom_image(mean[:30], &#39;img_mean&#39;, source=source) .",
            "url": "https://asvcode.github.io/fmi_docs/medical_imaging/dicom/fastai/2020/11/28/explore.html",
            "relUrl": "/medical_imaging/dicom/fastai/2020/11/28/explore.html",
            "date": " • Nov 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://asvcode.github.io/fmi_docs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://asvcode.github.io/fmi_docs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://asvcode.github.io/fmi_docs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://asvcode.github.io/fmi_docs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}